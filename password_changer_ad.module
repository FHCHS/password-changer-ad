<?php
/**
* @file
* Let user change their password in Microsoft AD using LDAP protocol.
*
*Change password in their password in Microsoft AD using LDAP protocol,
*this is going to be useful for students and staff accounts.
*
*/

include_once (dirname(__FILE__) . '/adLDAP/adLDAP.php' );

//Exception class for the active directory module
class passwordChangerActiveDirectory extends Exception {}

//Create user drupal user object
/**
* Get drupal user object.
*
* Given the user name create the user object return the object else
* set an error.
* 
* @param string $user_name this will be the user name (SAM name in Microsoft)
* @return  user object.
* @throws passwordChangerActiveDirectory if user is not found.
* 
* */

function password_changer_ad_drupal_user($user_name)  {
  
    //Get user id
    $uid = db_query("SELECT uid FROM {users} WHERE name = :user_name",
                    array(':user_name' => $user_name))->fetchField();
    
    //Check if user exist
    if (!is_null($uid)) {
      //Return user object
      return user_load($uid);
      
    }
    else {
      
      //Log error in watchdog
      watchdog('password_changer_ad', 'Unable to find drupal user with user name ' . $user_name, WATCHDOG_ERROR);
      
      //Throw  error
      throw new passwordChangerActiveDirectory('Unable to find drupal user with user name ' . $user_name);
      
    }
}


/**
* Get configuration based on the user role.
*
* Get configuration based on the user role this were the user is going to
* authenticate.
* 
* @param array $users_roles list of user roles
* @return  user object.
* @throws passwordChangerActiveDirectory if there is no configuration or configuration
* for the any of the user roles was not found.
* 
* */

function password_changer_ad_get_role_configuration($users_roles) {

    //Get settings
    $settings = variable_get('password_changer_ad_settings', array());
    
    
    
    //Check if settings is empty throw and error
    if (empty($settings)) {
     
      watchdog('password_changer_ad', 'Their is no settings set for the active directory password changer.', WATCHDOG_ERROR);
      
      throw new passwordChangerActiveDirectory('Their is no settings set for the active directory password changer.');
      
    }
   
   //Check if one user role matches a role in the settings
   foreach ($settings AS $index => $setting_rid) {
     //Get role id
     foreach ($setting_rid AS $rid => $values) {
       //Check role 
       foreach ( $users_roles AS $user_rid => $role_name) {
        //Get role id
         if ($rid == $user_rid) {
           return $values;
         }
       }  
     }
   }
  
  //Log the error on the watch dog 
  watchdog('password_changer_ad', 'Sorry user role does not match register roles in
                                           the active directory configuration settings.', WATCHDOG_ERROR);
 
 }
  

/**
* Get an active directory connection.
*
* Get an active directory connection base on the user role.
*
* @param string $user_name user name to create connection.
* @return adLDAP object or false if it can't create the adLDAP object.
* 
* */

function password_changer_ad_get_active_directory_connection($user_name) {
  
  
    //Try to create and adLDAP object
    try {
      //Get user if exist
      $user = password_changer_ad_drupal_user($user_name);
      
      //Get configuration settings for the user role
      $options = password_changer_ad_get_role_configuration($user->roles);
      
      //Create an active directory object
      $ad = new adLDAP($options);
    
      //Return an object
      return $ad;
     }
    catch (adLDAPException $e) {
  
      //Log error 
      watchdog('password_changer_ad', $e->getMessage(), WATCHDOG_ERROR);
      
      //Return FALSE for user was not found
      return FALSE;
    }
 
}


/*
 * Implement hook password_changer_api_check_user
 * From the password changer API 
 */
function password_changer_ad_password_changer_api_check_user($user_name) {

  try {
      
    //Get an adLDAP object  
    $ad = password_changer_ad_get_active_directory_connection($user_name);
        
    //Array of parameters to query
    $attributes = array("samaccountname", "mail", "memberof", "department", "displayname", "telephonenumber", "primarygroupid", "objectsid");
    
    $result = FALSE;
    
    if (is_object($ad)) {
      //Get results
      $result = $ad->user_info($user_name, $attributes);
    }  
    
    //If query is FALSE no user was found
    if ($result == FALSE) {
      //Log error 
      watchdog('password_changer_ad', 'Unable to connect to LDAP server.', WATCHDOG_ERROR);
      //Was not able to connect return FALSE
      return FALSE;
    }
    else {
      //Else return TRUE user exist
      return TRUE;
    }
  }
  catch (adLDAPException $e) {
    
    //Log error 
    watchdog('password_changer_ad', $e->getMessage(), WATCHDOG_ERROR);
    //Return FALSE for user was not found
    return FALSE;  
  }
 
}

/*
 *Implement hook password_changer_api_change_password
 *From the password changer API
 */
function password_changer_ad_password_changer_api_change_password($credentials) {
  
  //Try to change password  
  try {
      
    //Get an adLDAP object  
    $ad = password_changer_ad_configure();
    
    //Get results
    $result = $ad->user_password($credentials['user_name'], $credentials['password']);
     
    //If query is FALSE no user was found
    if ($result == FALSE) {
      
      //Log error 
      watchdog('password_changer_ad', 'Unable to change Active Directory password.', WATCHDOG_ERROR);
      
      //Return status variable
      return password_changer_api_status(array('status' => 'error',
                                        'message' => 'Unable to change Active Directory password.'));
    
    }
    else {
        
      //Else return TRUE user exist
      return password_changer_api_status(array('status' => 'status',
                                        'message' => 'Active Directory to password has been changed.' ));
    }
      
  } //Throw exception
  catch (adLDAPException $e) {
      
      //Log error 
      watchdog('password_changer_ad', $e->getMessage(), WATCHDOG_ERROR);
      
      //Return FALSE for user was not found
      return password_changer_api_status(array('status' => 'error',
                                        'message' => $e->getMessage()));  
  }
}

//Admin modules for configuration

/**
 * Implementation of hook_help().
 */
function password_changer_ad_help($path, $arg) {
  switch ($path) {
    case 'admin/help#password_changer_ad':
      $output = '<p>' . t('Just testing help hook') . '</p>';
      return $output;
  }
}


/**
 *Implement hook_menu()
 */
function password_changer_ad_menu() {
 
  
  $items['admin/config/password_changer/password_changer_ad'] = array(
    'title' => 'Password Changer Active Directory Settings',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('password_changer_ad_settings_page'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  //create menu item to remove page
  $items['admin/config/password_changer/password_changer_ad/remove'] = array(
    'title' => 'Remove Password Changer Active Directory Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_changer_ad_settings_confirm_remove'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
 
}



/**
 * Display settings page for menu option admin/config/password_changer/password_changer_ad.
 *
 * Display for configuration link of the active directory module.
 *
 * @param array $form array with form values.
 * @param array $form_state with form state.
 * @param string $action url get variable to know if setting is going to be removed.
 * @param string $id url get variable to know the id for the setting.
 *
 * @return array $form to be display.
 * 
 */
function password_changer_ad_settings_page($form, &$form_state, $action = 'none', $id = 'none') {

  $action = filter_xss($action);
  $id = filter_xss($id);
    
  //get persistent variable from the variable table in the Drupal DB
  $settings = variable_get('password_changer_ad_settings', array());
  
  //if setting is empty do not display table or header
  if (!empty($settings)) {
    //create header for table
    $header = array(t('Domain Controller'), t('AD SAM User Name'), t('Drupal User Role'), t('Update Setting'), t('Remove Setting'));
    
    //create table rows
    $rows = array();
    
    foreach ($settings AS $index => $role) {
      foreach ($role AS $rid => $values) {
        //Get role name
        $name = db_query('SELECT name FROM {role} WHERE rid = :rid', array(':rid' => $rid))->fetchField();
        
        //Set rows
        $rows[$index] = array('domain_controllers' => t($values['domain_controllers'][0]),
                              'ad_username' => t($values['ad_username']),
                              'drupal_user_role' => t($name),
                              'Update' => l(t('Update'), 'admin/config/password_changer/password_changer_ad/update/' . $index),
                              'Delete' => l(t('Remove'), 'admin/config/password_changer/password_changer_ad/remove/' . $index),
                              );
      }  
    }
    //Get header
    $table_rows['header'] =  $header;
    $table_rows['rows'] = $rows;
    
    //Set other variables
    $table_rows['attributes'] = array();
    $table_rows['caption']  = NULL;
    $table_rows['colgroups'] = array();
    $table_rows['sticky'] = array();
    $table_rows['empty']  = array();
    
    //Get table
    $table = theme_table($table_rows);
    
    //Display table
    $form['table'] = array(
         '#markup' => $table,
    );
  }
  
  
  //give the form a name
  $form['#attributes'] = array('name' => 'password_changer_ad_settings');
 
  //if action is set display a hidden field to flag the form as
  //make sure that this setting exists
  

  //if update
  if ((strtolower($action) == 'update' || strtolower($action) == 'remove') && isset($settings[$id])) {
    //Set hidden field
    $form['action'] = array('#type' => 'hidden',
                            '#value' => strtolower($action),
                            '#name' => 'action', );
    //Set hidden field id
    $form['id'] = array('#type' => 'hidden',
                        '#value' => $id, );
    //Get array role id  
    foreach ($settings[$id] as $rid => $field) {
    }
  }
  
 
  //Get roles
  $roles = db_query( 'SELECT * FROM {role}')->fetchAllAssoc('rid');
 
  //Generate options array 
  foreach ($roles AS $role_id => $role) {
   $options[$role_id] = $role->name; 
  }
  

  //display the domain label field with the filed to enter domain
  $form['domain_controllers'] = array(
    '#type' => 'textfield',
    '#title' => t('Active Directory Domain Controllers:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['domain_controllers'][0]:'',
    '#description' => t('Domain controller were users authenticate. (www.example.com)'),
  );
  
  //display the role label and the select fields
  $form['role'] = array(
   '#type' => 'select',
   '#title' => t('Users Role:'),
   '#options' => $options,
   '#required' => TRUE,
   '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                        isset($settings[$id][$rid]))? $rid:'',
   '#description' => t('Users with this role will use this domain controller to change their password.'),
  );
   
  //display the label and text field to holds the Google email
  $form['base_dn'] = array(
    '#type' => 'textfield',
    '#title' => t('Base DN:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['base_dn']:'',
    '#description' => t('Base Domain Name. (DC=WWW,DC=EXAMPLE,DC=COM)'),
  );
   
  //display the label and text field to hold password
  $form['account_suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Suffix:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['account_suffix']:'',
    '#description' => t('Account suffix. (@www.example.com)'),
  );
   
  //display the label and text field to holds the Google account type
  $form['ad_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Active Directory User Name:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['ad_username']:'',
    '#description' => t('User account on the domain controller with domain operator permissions.
                         The user name should be the sAMAccountName.'),
  );
  
   //display the label and text field to holds the Google service
  $form['ad_password'] = array(
    '#type' => 'password',
    '#title' => t('Active Directory user password:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['ad_password']:'',
    '#description' => t('User account password.'),
  );
  
  // Get other options values
  if ((strtolower($action) == 'update' || strtolower($action) == 'remove') && isset($settings[$id][$rid])) {      
    foreach ( $settings[$id][$rid] AS $key => $value) {
      if ($value == 1) { 
          $other_options[] = $key;
      }
    }
  }
  else {
    //Set default values
    $other_options = array('real_primarygroup');
    
  }
  
  //Display option check box
  $form['other_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Other Options'),
    '#default_value' => $other_options,
    '#options' => array(
      'real_primarygroup' => t('User real primary groups.'),
      'use_ssl' => t('Use SSL.'),
      'use_tsl' => t('Use TSL.'),
      'recursive_groups' => t('Use recursive groups.'),
    ),
    '#description' => t('To change password you must use SSL or TSL.'),
  );

  
  //display submit buttons
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
   );
  //Return 
  return $form;

}

/**
 * Implement hook _submit password_changer_google_settings_page.
 */
function password_changer_ad_settings_page_submit($form, &$form_state) {
  
  //Set values
  $use_ssl = ($form_state['values']['other_options']['use_ssl'] === 'use_ssl' ) ? TRUE: FALSE;
  $use_tsl = ($form_state['values']['other_options']['use_tsl'] === 'use_tsl' ) ? TRUE: FALSE;
  $recursive_groups = ($form_state['values']['other_options']['recursive_groups'] === 'recursive_groups' ) ? TRUE: FALSE;
  $real_primarygroup = ($form_state['values']['other_options']['real_primarygroup'] === 'real_primarygroup' ) ? TRUE: FALSE;
  
  
  //Get domains
  $settings = variable_get('password_changer_ad_settings', array());
 
  //Check if record is for update
  if (isset($form_state['values']['action'])) {
   
   //Check if the action is update
   if ($form_state['values']['action'] == 'update') {
     //If set make changes 
     if (isset($settings[$form_state['values']['id']])) {
       //Save updated record 
       $settings[$form_state['values']['id']] = array($form_state['values']['role'] => array('domain_controllers' => array($form_state['values']['domain_controllers']),
                                                               'account_suffix' => $form_state['values']['account_suffix'],
                                                               'base_dn' => $form_state['values']['base_dn'],
                                                               'ad_username' => $form_state['values']['ad_username'],
                                                               'ad_password' => $form_state['values']['ad_password'],
                                                               'use_ssl' =>  $use_ssl,
                                                               'use_tsl' => $use_tsl,
                                                               'recursive_groups' => $recursive_groups,
                                                               'real_primarygroup' => $real_primarygroup, ));
                                                         
     }
   }
  }//Add new domain
  else {
  
   
    //Remember to retrieve save data
    $settings[] = array($form_state['values']['role'] => array('domain_controllers' => array($form_state['values']['domain_controllers']),
                                                               'account_suffix' => $form_state['values']['account_suffix'],
                                                               'base_dn' => $form_state['values']['base_dn'],
                                                               'ad_username' => $form_state['values']['ad_username'],
                                                               'ad_password' => $form_state['values']['ad_password'],
                                                               'use_ssl' =>  $use_ssl,
                                                               'use_tsl' => $use_tsl,
                                                               'recursive_groups' => $recursive_groups,
                                                               'real_primarygroup' => $real_primarygroup, ));
  }
  
 
  //Save the password changer
  variable_set('password_changer_ad_settings', $settings);

}



/**
 * Display confirmation form to remove active directory setting.
 *
 * Display confirmation form to remove active directory stetting, define
 * by menu option admin/config/password_changer/password_changer_ad/remove.
 *
 * @param array $form array with form values.
 * @param array $form_state with form state.
 * @param string $id of setting to be removed.
 *
 * @return array $form to be display.
 * 
 */
function password_changer_ad_settings_confirm_remove($form, &$form_state, $id = NULL ) {
    
  //get settings
  $settings = variable_get('password_changer_ad_settings', array()); 
 
  //if type is not set redirect page to application payment
  if (isset($id)) {
    
    //Cleaning id variables
    $id = filter_xss($id);

    $form['id'] = array('#type' => 'hidden', '#value' => $id );
  

    //return confirmation form
    return confirm_form($form,
                 t('Are you sure you want to delete this active directory setting?'),
                 'admin/config/password_changer/password_changer_ad' ,
                 'This action can not be undone.',
                 t('Delete'),
                 t('Cancel'));
  }
}


/**
 * Remove delete submit form.
 */

function password_changer_ad_settings_confirm_remove_submit($form, &$form_state) {
  
  //Get domains
 $settings = variable_get('password_changer_ad_settings', array());
 
 
 //Check if the id is set
 if (isset($form_state['values']['id'])) {
  //Check if the settings id is set
  if (isset($settings[$form_state['values']['id']])) {
    //Remove persistent variable
    unset($settings[$form_state['values']['id']]);
    //Save new array in persistent variable
    variable_set('password_changer_ad_settings', $settings);
  }
 }
  
 //redirect to main form application settings form
  $form_state['redirect'] = 'admin/config/password_changer/password_changer_ad';
}





